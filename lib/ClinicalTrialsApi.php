<?php
/**
 * ClinicalTrialsApi
 * PHP version 5
 *
 * @category Class
 * @package  NCIOCPL\ClinicalTrialSearch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NCI Clinical Trials Search API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */


use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\Configuration;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\HeaderSelector;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ObjectSerializer;

/**
 * ClinicalTrialsApi Class Doc Comment
 *
 * @category Class
 * @package  NCIOCPL\ClinicalTrialSearch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClinicalTrialsApi extends ClinicalTrialsApiInterface
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTrialById
     *
     * Get Trial
     *
     * @param  string $id NCI ID or NCT ID of Trial. (required)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTrialById($id)
    {
        $this->getTrialByIdWithHttpInfo($id);
    }

    /**
     * Operation getTrialByIdWithHttpInfo
     *
     * Get Trial
     *
     * @param  string $id NCI ID or NCT ID of Trial. (required)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrialByIdWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->getTrialByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTrialByIdAsync
     *
     * Get Trial
     *
     * @param  string $id NCI ID or NCT ID of Trial. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrialByIdAsync($id)
    {
        return $this->getTrialByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrialByIdAsyncWithHttpInfo
     *
     * Get Trial
     *
     * @param  string $id NCI ID or NCT ID of Trial. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrialByIdAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->getTrialByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrialById'
     *
     * @param  string $id NCI ID or NCT ID of Trial. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrialByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTrialById'
            );
        }

        $resourcePath = '/v1/clinical-trial/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTrialsByGet
     *
     * Search Trials by GET
     *
     * @param  string $size Size of results. (optional)
     * @param  string $from Starting from nth position of results lineup. (optional)
     * @param  string $include Include only this attribute in trials and exclude others. (optional)
     * @param  string $exclude Exclude only this attribute in trials and include others. (optional)
     * @param  string $_fulltext filter results by examining a variety of text-based fields. (optional)
     * @param  string $sites_org_name_fulltext filter results by examining words that make up organization name e.g &#x27;Mayo&#x27;. (optional)
     * @param  string $_trialids filter results by examining trial identifiers. (optional)
     * @param  string $nci_id Search by NCI ID. (optional)
     * @param  string $nct_id Search by NCT ID. (optional)
     * @param  string $protocol_id Search by Protocol ID. (optional)
     * @param  string $ccr_id Search by CCR ID. (optional)
     * @param  string $ctep_id Search by CTEP ID (optional)
     * @param  string $dcp_id Search by DCP ID (optional)
     * @param  string $current_trial_status current_trial_status (optional)
     * @param  string $phase_phase phase_phase (optional)
     * @param  string $study_protocol_type study_protocol_type (optional)
     * @param  string $brief_title brief_title (optional)
     * @param  string $brief_summary brief_summary (optional)
     * @param  string $official_title official_title (optional)
     * @param  string $primary_purpose_primary_purpose_code primary_purpose_primary_purpose_code (optional)
     * @param  string $accepts_healthy_volunteers_indicator accepts_healthy_volunteers_indicator (optional)
     * @param  string $acronym acronym (optional)
     * @param  string $amendment_date amendment_date (optional)
     * @param  string $anatomic_sites anatomic_sites (optional)
     * @param  string $arms_arm_description arms_arm_description (optional)
     * @param  string $arms_arm_name arms_arm_name (optional)
     * @param  string $arms_arm_type arms_arm_type (optional)
     * @param  string $arms_interventions_intervention_code arms_interventions_intervention_code (optional)
     * @param  string $arms_interventions_intervention_description arms_interventions_intervention_description (optional)
     * @param  string $arms_interventions_intervention_name arms_interventions_intervention_name (optional)
     * @param  string $arms_interventions_intervention_type arms_interventions_intervention_type (optional)
     * @param  string $arms_interventions_synonyms arms_interventions_synonyms (optional)
     * @param  string $associated_studies_study_id associated_studies_study_id (optional)
     * @param  string $associated_studies_study_id_type associated_studies_study_id_type (optional)
     * @param  string $eligibility_structured_gender eligibility_structured_gender (optional)
     * @param  string $eligibility_structured_max_age_in_years_lte eligibility_structured_max_age_in_years_lte (optional)
     * @param  string $eligibility_structured_max_age_in_years_gte eligibility_structured_max_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_in_years_lte eligibility_structured_min_age_in_years_lte (optional)
     * @param  string $eligibility_structured_min_age_in_years_gte eligibility_structured_min_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_unit eligibility_structured_min_age_unit (optional)
     * @param  string $eligibility_structured_max_age_unit eligibility_structured_max_age_unit (optional)
     * @param  string $eligibility_structured_max_age_number_lte eligibility_structured_max_age_number_lte (optional)
     * @param  string $eligibility_structured_max_age_number_gte eligibility_structured_max_age_number_gte (optional)
     * @param  string $eligibility_structured_min_age_number_lte eligibility_structured_min_age_number_lte (optional)
     * @param  string $eligibility_structured_min_age_number_gte eligibility_structured_min_age_number_gte (optional)
     * @param  string $current_trial_status_date_lte current_trial_status_date_lte (optional)
     * @param  string $current_trial_status_date_gte current_trial_status_date_gte (optional)
     * @param  string $record_verification_date_lte record_verification_date_lte (optional)
     * @param  string $record_verification_date_gte record_verification_date_gte (optional)
     * @param  string $sites_org_coordinates_lat sites_org_coordinates_lat (optional)
     * @param  string $sites_org_coordinates_lon sites_org_coordinates_lon (optional)
     * @param  string $sites_org_coordinates_dist sites_org_coordinates_dist (optional)
     * @param  string $sites_contact_email sites_contact_email (optional)
     * @param  string $sites_contact_name sites_contact_name (optional)
     * @param  string $sites_contact_name__auto sites_contact_name__auto (optional)
     * @param  string $sites_contact_name__raw sites_contact_name__raw (optional)
     * @param  string $sites_contact_phone sites_contact_phone (optional)
     * @param  string $sites_generic_contact sites_generic_contact (optional)
     * @param  string $sites_org_address_line_1 sites_org_address_line_1 (optional)
     * @param  string $sites_org_address_line_2 sites_org_address_line_2 (optional)
     * @param  string $sites_org_city sites_org_city (optional)
     * @param  string $sites_org_postal_code sites_org_postal_code (optional)
     * @param  string $sites_org_state_or_province sites_org_state_or_province (optional)
     * @param  string $sites_org_country sites_org_country (optional)
     * @param  string $sites_org_country__raw sites_org_country__raw (optional)
     * @param  string $sites_org_email sites_org_email (optional)
     * @param  string $sites_org_family sites_org_family (optional)
     * @param  string $sites_org_fax sites_org_fax (optional)
     * @param  string $sites_org_name sites_org_name (optional)
     * @param  string $sites_org_name__auto sites_org_name__auto (optional)
     * @param  string $sites_org_name__raw sites_org_name__raw (optional)
     * @param  string $sites_org_phone sites_org_phone (optional)
     * @param  string $sites_org_status sites_org_status (optional)
     * @param  string $sites_org_status_date sites_org_status_date (optional)
     * @param  string $sites_org_to_family_relationship sites_org_to_family_relationship (optional)
     * @param  string $sites_org_tty sites_org_tty (optional)
     * @param  string $sites_recruitment_status sites_recruitment_status (optional)
     * @param  string $sites_recruitment_status_date sites_recruitment_status_date (optional)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function searchTrialsByGet($size = null, $from = null, $include = null, $exclude = null, $_fulltext = null, $sites_org_name_fulltext = null, $_trialids = null, $nci_id = null, $nct_id = null, $protocol_id = null, $ccr_id = null, $ctep_id = null, $dcp_id = null, $current_trial_status = null, $phase_phase = null, $study_protocol_type = null, $brief_title = null, $brief_summary = null, $official_title = null, $primary_purpose_primary_purpose_code = null, $accepts_healthy_volunteers_indicator = null, $acronym = null, $amendment_date = null, $anatomic_sites = null, $arms_arm_description = null, $arms_arm_name = null, $arms_arm_type = null, $arms_interventions_intervention_code = null, $arms_interventions_intervention_description = null, $arms_interventions_intervention_name = null, $arms_interventions_intervention_type = null, $arms_interventions_synonyms = null, $associated_studies_study_id = null, $associated_studies_study_id_type = null, $eligibility_structured_gender = null, $eligibility_structured_max_age_in_years_lte = null, $eligibility_structured_max_age_in_years_gte = null, $eligibility_structured_min_age_in_years_lte = null, $eligibility_structured_min_age_in_years_gte = null, $eligibility_structured_min_age_unit = null, $eligibility_structured_max_age_unit = null, $eligibility_structured_max_age_number_lte = null, $eligibility_structured_max_age_number_gte = null, $eligibility_structured_min_age_number_lte = null, $eligibility_structured_min_age_number_gte = null, $current_trial_status_date_lte = null, $current_trial_status_date_gte = null, $record_verification_date_lte = null, $record_verification_date_gte = null, $sites_org_coordinates_lat = null, $sites_org_coordinates_lon = null, $sites_org_coordinates_dist = null, $sites_contact_email = null, $sites_contact_name = null, $sites_contact_name__auto = null, $sites_contact_name__raw = null, $sites_contact_phone = null, $sites_generic_contact = null, $sites_org_address_line_1 = null, $sites_org_address_line_2 = null, $sites_org_city = null, $sites_org_postal_code = null, $sites_org_state_or_province = null, $sites_org_country = null, $sites_org_country__raw = null, $sites_org_email = null, $sites_org_family = null, $sites_org_fax = null, $sites_org_name = null, $sites_org_name__auto = null, $sites_org_name__raw = null, $sites_org_phone = null, $sites_org_status = null, $sites_org_status_date = null, $sites_org_to_family_relationship = null, $sites_org_tty = null, $sites_recruitment_status = null, $sites_recruitment_status_date = null)
    {
        $this->searchTrialsByGetWithHttpInfo($size, $from, $include, $exclude, $_fulltext, $sites_org_name_fulltext, $_trialids, $nci_id, $nct_id, $protocol_id, $ccr_id, $ctep_id, $dcp_id, $current_trial_status, $phase_phase, $study_protocol_type, $brief_title, $brief_summary, $official_title, $primary_purpose_primary_purpose_code, $accepts_healthy_volunteers_indicator, $acronym, $amendment_date, $anatomic_sites, $arms_arm_description, $arms_arm_name, $arms_arm_type, $arms_interventions_intervention_code, $arms_interventions_intervention_description, $arms_interventions_intervention_name, $arms_interventions_intervention_type, $arms_interventions_synonyms, $associated_studies_study_id, $associated_studies_study_id_type, $eligibility_structured_gender, $eligibility_structured_max_age_in_years_lte, $eligibility_structured_max_age_in_years_gte, $eligibility_structured_min_age_in_years_lte, $eligibility_structured_min_age_in_years_gte, $eligibility_structured_min_age_unit, $eligibility_structured_max_age_unit, $eligibility_structured_max_age_number_lte, $eligibility_structured_max_age_number_gte, $eligibility_structured_min_age_number_lte, $eligibility_structured_min_age_number_gte, $current_trial_status_date_lte, $current_trial_status_date_gte, $record_verification_date_lte, $record_verification_date_gte, $sites_org_coordinates_lat, $sites_org_coordinates_lon, $sites_org_coordinates_dist, $sites_contact_email, $sites_contact_name, $sites_contact_name__auto, $sites_contact_name__raw, $sites_contact_phone, $sites_generic_contact, $sites_org_address_line_1, $sites_org_address_line_2, $sites_org_city, $sites_org_postal_code, $sites_org_state_or_province, $sites_org_country, $sites_org_country__raw, $sites_org_email, $sites_org_family, $sites_org_fax, $sites_org_name, $sites_org_name__auto, $sites_org_name__raw, $sites_org_phone, $sites_org_status, $sites_org_status_date, $sites_org_to_family_relationship, $sites_org_tty, $sites_recruitment_status, $sites_recruitment_status_date);
    }

    /**
     * Operation searchTrialsByGetWithHttpInfo
     *
     * Search Trials by GET
     *
     * @param  string $size Size of results. (optional)
     * @param  string $from Starting from nth position of results lineup. (optional)
     * @param  string $include Include only this attribute in trials and exclude others. (optional)
     * @param  string $exclude Exclude only this attribute in trials and include others. (optional)
     * @param  string $_fulltext filter results by examining a variety of text-based fields. (optional)
     * @param  string $sites_org_name_fulltext filter results by examining words that make up organization name e.g &#x27;Mayo&#x27;. (optional)
     * @param  string $_trialids filter results by examining trial identifiers. (optional)
     * @param  string $nci_id Search by NCI ID. (optional)
     * @param  string $nct_id Search by NCT ID. (optional)
     * @param  string $protocol_id Search by Protocol ID. (optional)
     * @param  string $ccr_id Search by CCR ID. (optional)
     * @param  string $ctep_id Search by CTEP ID (optional)
     * @param  string $dcp_id Search by DCP ID (optional)
     * @param  string $current_trial_status (optional)
     * @param  string $phase_phase (optional)
     * @param  string $study_protocol_type (optional)
     * @param  string $brief_title (optional)
     * @param  string $brief_summary (optional)
     * @param  string $official_title (optional)
     * @param  string $primary_purpose_primary_purpose_code (optional)
     * @param  string $accepts_healthy_volunteers_indicator (optional)
     * @param  string $acronym (optional)
     * @param  string $amendment_date (optional)
     * @param  string $anatomic_sites (optional)
     * @param  string $arms_arm_description (optional)
     * @param  string $arms_arm_name (optional)
     * @param  string $arms_arm_type (optional)
     * @param  string $arms_interventions_intervention_code (optional)
     * @param  string $arms_interventions_intervention_description (optional)
     * @param  string $arms_interventions_intervention_name (optional)
     * @param  string $arms_interventions_intervention_type (optional)
     * @param  string $arms_interventions_synonyms (optional)
     * @param  string $associated_studies_study_id (optional)
     * @param  string $associated_studies_study_id_type (optional)
     * @param  string $eligibility_structured_gender (optional)
     * @param  string $eligibility_structured_max_age_in_years_lte (optional)
     * @param  string $eligibility_structured_max_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_in_years_lte (optional)
     * @param  string $eligibility_structured_min_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_unit (optional)
     * @param  string $eligibility_structured_max_age_unit (optional)
     * @param  string $eligibility_structured_max_age_number_lte (optional)
     * @param  string $eligibility_structured_max_age_number_gte (optional)
     * @param  string $eligibility_structured_min_age_number_lte (optional)
     * @param  string $eligibility_structured_min_age_number_gte (optional)
     * @param  string $current_trial_status_date_lte (optional)
     * @param  string $current_trial_status_date_gte (optional)
     * @param  string $record_verification_date_lte (optional)
     * @param  string $record_verification_date_gte (optional)
     * @param  string $sites_org_coordinates_lat (optional)
     * @param  string $sites_org_coordinates_lon (optional)
     * @param  string $sites_org_coordinates_dist (optional)
     * @param  string $sites_contact_email (optional)
     * @param  string $sites_contact_name (optional)
     * @param  string $sites_contact_name__auto (optional)
     * @param  string $sites_contact_name__raw (optional)
     * @param  string $sites_contact_phone (optional)
     * @param  string $sites_generic_contact (optional)
     * @param  string $sites_org_address_line_1 (optional)
     * @param  string $sites_org_address_line_2 (optional)
     * @param  string $sites_org_city (optional)
     * @param  string $sites_org_postal_code (optional)
     * @param  string $sites_org_state_or_province (optional)
     * @param  string $sites_org_country (optional)
     * @param  string $sites_org_country__raw (optional)
     * @param  string $sites_org_email (optional)
     * @param  string $sites_org_family (optional)
     * @param  string $sites_org_fax (optional)
     * @param  string $sites_org_name (optional)
     * @param  string $sites_org_name__auto (optional)
     * @param  string $sites_org_name__raw (optional)
     * @param  string $sites_org_phone (optional)
     * @param  string $sites_org_status (optional)
     * @param  string $sites_org_status_date (optional)
     * @param  string $sites_org_to_family_relationship (optional)
     * @param  string $sites_org_tty (optional)
     * @param  string $sites_recruitment_status (optional)
     * @param  string $sites_recruitment_status_date (optional)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTrialsByGetWithHttpInfo($size = null, $from = null, $include = null, $exclude = null, $_fulltext = null, $sites_org_name_fulltext = null, $_trialids = null, $nci_id = null, $nct_id = null, $protocol_id = null, $ccr_id = null, $ctep_id = null, $dcp_id = null, $current_trial_status = null, $phase_phase = null, $study_protocol_type = null, $brief_title = null, $brief_summary = null, $official_title = null, $primary_purpose_primary_purpose_code = null, $accepts_healthy_volunteers_indicator = null, $acronym = null, $amendment_date = null, $anatomic_sites = null, $arms_arm_description = null, $arms_arm_name = null, $arms_arm_type = null, $arms_interventions_intervention_code = null, $arms_interventions_intervention_description = null, $arms_interventions_intervention_name = null, $arms_interventions_intervention_type = null, $arms_interventions_synonyms = null, $associated_studies_study_id = null, $associated_studies_study_id_type = null, $eligibility_structured_gender = null, $eligibility_structured_max_age_in_years_lte = null, $eligibility_structured_max_age_in_years_gte = null, $eligibility_structured_min_age_in_years_lte = null, $eligibility_structured_min_age_in_years_gte = null, $eligibility_structured_min_age_unit = null, $eligibility_structured_max_age_unit = null, $eligibility_structured_max_age_number_lte = null, $eligibility_structured_max_age_number_gte = null, $eligibility_structured_min_age_number_lte = null, $eligibility_structured_min_age_number_gte = null, $current_trial_status_date_lte = null, $current_trial_status_date_gte = null, $record_verification_date_lte = null, $record_verification_date_gte = null, $sites_org_coordinates_lat = null, $sites_org_coordinates_lon = null, $sites_org_coordinates_dist = null, $sites_contact_email = null, $sites_contact_name = null, $sites_contact_name__auto = null, $sites_contact_name__raw = null, $sites_contact_phone = null, $sites_generic_contact = null, $sites_org_address_line_1 = null, $sites_org_address_line_2 = null, $sites_org_city = null, $sites_org_postal_code = null, $sites_org_state_or_province = null, $sites_org_country = null, $sites_org_country__raw = null, $sites_org_email = null, $sites_org_family = null, $sites_org_fax = null, $sites_org_name = null, $sites_org_name__auto = null, $sites_org_name__raw = null, $sites_org_phone = null, $sites_org_status = null, $sites_org_status_date = null, $sites_org_to_family_relationship = null, $sites_org_tty = null, $sites_recruitment_status = null, $sites_recruitment_status_date = null)
    {
        $returnType = '';
        $request = $this->searchTrialsByGetRequest($size, $from, $include, $exclude, $_fulltext, $sites_org_name_fulltext, $_trialids, $nci_id, $nct_id, $protocol_id, $ccr_id, $ctep_id, $dcp_id, $current_trial_status, $phase_phase, $study_protocol_type, $brief_title, $brief_summary, $official_title, $primary_purpose_primary_purpose_code, $accepts_healthy_volunteers_indicator, $acronym, $amendment_date, $anatomic_sites, $arms_arm_description, $arms_arm_name, $arms_arm_type, $arms_interventions_intervention_code, $arms_interventions_intervention_description, $arms_interventions_intervention_name, $arms_interventions_intervention_type, $arms_interventions_synonyms, $associated_studies_study_id, $associated_studies_study_id_type, $eligibility_structured_gender, $eligibility_structured_max_age_in_years_lte, $eligibility_structured_max_age_in_years_gte, $eligibility_structured_min_age_in_years_lte, $eligibility_structured_min_age_in_years_gte, $eligibility_structured_min_age_unit, $eligibility_structured_max_age_unit, $eligibility_structured_max_age_number_lte, $eligibility_structured_max_age_number_gte, $eligibility_structured_min_age_number_lte, $eligibility_structured_min_age_number_gte, $current_trial_status_date_lte, $current_trial_status_date_gte, $record_verification_date_lte, $record_verification_date_gte, $sites_org_coordinates_lat, $sites_org_coordinates_lon, $sites_org_coordinates_dist, $sites_contact_email, $sites_contact_name, $sites_contact_name__auto, $sites_contact_name__raw, $sites_contact_phone, $sites_generic_contact, $sites_org_address_line_1, $sites_org_address_line_2, $sites_org_city, $sites_org_postal_code, $sites_org_state_or_province, $sites_org_country, $sites_org_country__raw, $sites_org_email, $sites_org_family, $sites_org_fax, $sites_org_name, $sites_org_name__auto, $sites_org_name__raw, $sites_org_phone, $sites_org_status, $sites_org_status_date, $sites_org_to_family_relationship, $sites_org_tty, $sites_recruitment_status, $sites_recruitment_status_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation searchTrialsByGetAsync
     *
     * Search Trials by GET
     *
     * @param  string $size Size of results. (optional)
     * @param  string $from Starting from nth position of results lineup. (optional)
     * @param  string $include Include only this attribute in trials and exclude others. (optional)
     * @param  string $exclude Exclude only this attribute in trials and include others. (optional)
     * @param  string $_fulltext filter results by examining a variety of text-based fields. (optional)
     * @param  string $sites_org_name_fulltext filter results by examining words that make up organization name e.g &#x27;Mayo&#x27;. (optional)
     * @param  string $_trialids filter results by examining trial identifiers. (optional)
     * @param  string $nci_id Search by NCI ID. (optional)
     * @param  string $nct_id Search by NCT ID. (optional)
     * @param  string $protocol_id Search by Protocol ID. (optional)
     * @param  string $ccr_id Search by CCR ID. (optional)
     * @param  string $ctep_id Search by CTEP ID (optional)
     * @param  string $dcp_id Search by DCP ID (optional)
     * @param  string $current_trial_status (optional)
     * @param  string $phase_phase (optional)
     * @param  string $study_protocol_type (optional)
     * @param  string $brief_title (optional)
     * @param  string $brief_summary (optional)
     * @param  string $official_title (optional)
     * @param  string $primary_purpose_primary_purpose_code (optional)
     * @param  string $accepts_healthy_volunteers_indicator (optional)
     * @param  string $acronym (optional)
     * @param  string $amendment_date (optional)
     * @param  string $anatomic_sites (optional)
     * @param  string $arms_arm_description (optional)
     * @param  string $arms_arm_name (optional)
     * @param  string $arms_arm_type (optional)
     * @param  string $arms_interventions_intervention_code (optional)
     * @param  string $arms_interventions_intervention_description (optional)
     * @param  string $arms_interventions_intervention_name (optional)
     * @param  string $arms_interventions_intervention_type (optional)
     * @param  string $arms_interventions_synonyms (optional)
     * @param  string $associated_studies_study_id (optional)
     * @param  string $associated_studies_study_id_type (optional)
     * @param  string $eligibility_structured_gender (optional)
     * @param  string $eligibility_structured_max_age_in_years_lte (optional)
     * @param  string $eligibility_structured_max_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_in_years_lte (optional)
     * @param  string $eligibility_structured_min_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_unit (optional)
     * @param  string $eligibility_structured_max_age_unit (optional)
     * @param  string $eligibility_structured_max_age_number_lte (optional)
     * @param  string $eligibility_structured_max_age_number_gte (optional)
     * @param  string $eligibility_structured_min_age_number_lte (optional)
     * @param  string $eligibility_structured_min_age_number_gte (optional)
     * @param  string $current_trial_status_date_lte (optional)
     * @param  string $current_trial_status_date_gte (optional)
     * @param  string $record_verification_date_lte (optional)
     * @param  string $record_verification_date_gte (optional)
     * @param  string $sites_org_coordinates_lat (optional)
     * @param  string $sites_org_coordinates_lon (optional)
     * @param  string $sites_org_coordinates_dist (optional)
     * @param  string $sites_contact_email (optional)
     * @param  string $sites_contact_name (optional)
     * @param  string $sites_contact_name__auto (optional)
     * @param  string $sites_contact_name__raw (optional)
     * @param  string $sites_contact_phone (optional)
     * @param  string $sites_generic_contact (optional)
     * @param  string $sites_org_address_line_1 (optional)
     * @param  string $sites_org_address_line_2 (optional)
     * @param  string $sites_org_city (optional)
     * @param  string $sites_org_postal_code (optional)
     * @param  string $sites_org_state_or_province (optional)
     * @param  string $sites_org_country (optional)
     * @param  string $sites_org_country__raw (optional)
     * @param  string $sites_org_email (optional)
     * @param  string $sites_org_family (optional)
     * @param  string $sites_org_fax (optional)
     * @param  string $sites_org_name (optional)
     * @param  string $sites_org_name__auto (optional)
     * @param  string $sites_org_name__raw (optional)
     * @param  string $sites_org_phone (optional)
     * @param  string $sites_org_status (optional)
     * @param  string $sites_org_status_date (optional)
     * @param  string $sites_org_to_family_relationship (optional)
     * @param  string $sites_org_tty (optional)
     * @param  string $sites_recruitment_status (optional)
     * @param  string $sites_recruitment_status_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrialsByGetAsync($size = null, $from = null, $include = null, $exclude = null, $_fulltext = null, $sites_org_name_fulltext = null, $_trialids = null, $nci_id = null, $nct_id = null, $protocol_id = null, $ccr_id = null, $ctep_id = null, $dcp_id = null, $current_trial_status = null, $phase_phase = null, $study_protocol_type = null, $brief_title = null, $brief_summary = null, $official_title = null, $primary_purpose_primary_purpose_code = null, $accepts_healthy_volunteers_indicator = null, $acronym = null, $amendment_date = null, $anatomic_sites = null, $arms_arm_description = null, $arms_arm_name = null, $arms_arm_type = null, $arms_interventions_intervention_code = null, $arms_interventions_intervention_description = null, $arms_interventions_intervention_name = null, $arms_interventions_intervention_type = null, $arms_interventions_synonyms = null, $associated_studies_study_id = null, $associated_studies_study_id_type = null, $eligibility_structured_gender = null, $eligibility_structured_max_age_in_years_lte = null, $eligibility_structured_max_age_in_years_gte = null, $eligibility_structured_min_age_in_years_lte = null, $eligibility_structured_min_age_in_years_gte = null, $eligibility_structured_min_age_unit = null, $eligibility_structured_max_age_unit = null, $eligibility_structured_max_age_number_lte = null, $eligibility_structured_max_age_number_gte = null, $eligibility_structured_min_age_number_lte = null, $eligibility_structured_min_age_number_gte = null, $current_trial_status_date_lte = null, $current_trial_status_date_gte = null, $record_verification_date_lte = null, $record_verification_date_gte = null, $sites_org_coordinates_lat = null, $sites_org_coordinates_lon = null, $sites_org_coordinates_dist = null, $sites_contact_email = null, $sites_contact_name = null, $sites_contact_name__auto = null, $sites_contact_name__raw = null, $sites_contact_phone = null, $sites_generic_contact = null, $sites_org_address_line_1 = null, $sites_org_address_line_2 = null, $sites_org_city = null, $sites_org_postal_code = null, $sites_org_state_or_province = null, $sites_org_country = null, $sites_org_country__raw = null, $sites_org_email = null, $sites_org_family = null, $sites_org_fax = null, $sites_org_name = null, $sites_org_name__auto = null, $sites_org_name__raw = null, $sites_org_phone = null, $sites_org_status = null, $sites_org_status_date = null, $sites_org_to_family_relationship = null, $sites_org_tty = null, $sites_recruitment_status = null, $sites_recruitment_status_date = null)
    {
        return $this->searchTrialsByGetAsyncWithHttpInfo($size, $from, $include, $exclude, $_fulltext, $sites_org_name_fulltext, $_trialids, $nci_id, $nct_id, $protocol_id, $ccr_id, $ctep_id, $dcp_id, $current_trial_status, $phase_phase, $study_protocol_type, $brief_title, $brief_summary, $official_title, $primary_purpose_primary_purpose_code, $accepts_healthy_volunteers_indicator, $acronym, $amendment_date, $anatomic_sites, $arms_arm_description, $arms_arm_name, $arms_arm_type, $arms_interventions_intervention_code, $arms_interventions_intervention_description, $arms_interventions_intervention_name, $arms_interventions_intervention_type, $arms_interventions_synonyms, $associated_studies_study_id, $associated_studies_study_id_type, $eligibility_structured_gender, $eligibility_structured_max_age_in_years_lte, $eligibility_structured_max_age_in_years_gte, $eligibility_structured_min_age_in_years_lte, $eligibility_structured_min_age_in_years_gte, $eligibility_structured_min_age_unit, $eligibility_structured_max_age_unit, $eligibility_structured_max_age_number_lte, $eligibility_structured_max_age_number_gte, $eligibility_structured_min_age_number_lte, $eligibility_structured_min_age_number_gte, $current_trial_status_date_lte, $current_trial_status_date_gte, $record_verification_date_lte, $record_verification_date_gte, $sites_org_coordinates_lat, $sites_org_coordinates_lon, $sites_org_coordinates_dist, $sites_contact_email, $sites_contact_name, $sites_contact_name__auto, $sites_contact_name__raw, $sites_contact_phone, $sites_generic_contact, $sites_org_address_line_1, $sites_org_address_line_2, $sites_org_city, $sites_org_postal_code, $sites_org_state_or_province, $sites_org_country, $sites_org_country__raw, $sites_org_email, $sites_org_family, $sites_org_fax, $sites_org_name, $sites_org_name__auto, $sites_org_name__raw, $sites_org_phone, $sites_org_status, $sites_org_status_date, $sites_org_to_family_relationship, $sites_org_tty, $sites_recruitment_status, $sites_recruitment_status_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTrialsByGetAsyncWithHttpInfo
     *
     * Search Trials by GET
     *
     * @param  string $size Size of results. (optional)
     * @param  string $from Starting from nth position of results lineup. (optional)
     * @param  string $include Include only this attribute in trials and exclude others. (optional)
     * @param  string $exclude Exclude only this attribute in trials and include others. (optional)
     * @param  string $_fulltext filter results by examining a variety of text-based fields. (optional)
     * @param  string $sites_org_name_fulltext filter results by examining words that make up organization name e.g &#x27;Mayo&#x27;. (optional)
     * @param  string $_trialids filter results by examining trial identifiers. (optional)
     * @param  string $nci_id Search by NCI ID. (optional)
     * @param  string $nct_id Search by NCT ID. (optional)
     * @param  string $protocol_id Search by Protocol ID. (optional)
     * @param  string $ccr_id Search by CCR ID. (optional)
     * @param  string $ctep_id Search by CTEP ID (optional)
     * @param  string $dcp_id Search by DCP ID (optional)
     * @param  string $current_trial_status (optional)
     * @param  string $phase_phase (optional)
     * @param  string $study_protocol_type (optional)
     * @param  string $brief_title (optional)
     * @param  string $brief_summary (optional)
     * @param  string $official_title (optional)
     * @param  string $primary_purpose_primary_purpose_code (optional)
     * @param  string $accepts_healthy_volunteers_indicator (optional)
     * @param  string $acronym (optional)
     * @param  string $amendment_date (optional)
     * @param  string $anatomic_sites (optional)
     * @param  string $arms_arm_description (optional)
     * @param  string $arms_arm_name (optional)
     * @param  string $arms_arm_type (optional)
     * @param  string $arms_interventions_intervention_code (optional)
     * @param  string $arms_interventions_intervention_description (optional)
     * @param  string $arms_interventions_intervention_name (optional)
     * @param  string $arms_interventions_intervention_type (optional)
     * @param  string $arms_interventions_synonyms (optional)
     * @param  string $associated_studies_study_id (optional)
     * @param  string $associated_studies_study_id_type (optional)
     * @param  string $eligibility_structured_gender (optional)
     * @param  string $eligibility_structured_max_age_in_years_lte (optional)
     * @param  string $eligibility_structured_max_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_in_years_lte (optional)
     * @param  string $eligibility_structured_min_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_unit (optional)
     * @param  string $eligibility_structured_max_age_unit (optional)
     * @param  string $eligibility_structured_max_age_number_lte (optional)
     * @param  string $eligibility_structured_max_age_number_gte (optional)
     * @param  string $eligibility_structured_min_age_number_lte (optional)
     * @param  string $eligibility_structured_min_age_number_gte (optional)
     * @param  string $current_trial_status_date_lte (optional)
     * @param  string $current_trial_status_date_gte (optional)
     * @param  string $record_verification_date_lte (optional)
     * @param  string $record_verification_date_gte (optional)
     * @param  string $sites_org_coordinates_lat (optional)
     * @param  string $sites_org_coordinates_lon (optional)
     * @param  string $sites_org_coordinates_dist (optional)
     * @param  string $sites_contact_email (optional)
     * @param  string $sites_contact_name (optional)
     * @param  string $sites_contact_name__auto (optional)
     * @param  string $sites_contact_name__raw (optional)
     * @param  string $sites_contact_phone (optional)
     * @param  string $sites_generic_contact (optional)
     * @param  string $sites_org_address_line_1 (optional)
     * @param  string $sites_org_address_line_2 (optional)
     * @param  string $sites_org_city (optional)
     * @param  string $sites_org_postal_code (optional)
     * @param  string $sites_org_state_or_province (optional)
     * @param  string $sites_org_country (optional)
     * @param  string $sites_org_country__raw (optional)
     * @param  string $sites_org_email (optional)
     * @param  string $sites_org_family (optional)
     * @param  string $sites_org_fax (optional)
     * @param  string $sites_org_name (optional)
     * @param  string $sites_org_name__auto (optional)
     * @param  string $sites_org_name__raw (optional)
     * @param  string $sites_org_phone (optional)
     * @param  string $sites_org_status (optional)
     * @param  string $sites_org_status_date (optional)
     * @param  string $sites_org_to_family_relationship (optional)
     * @param  string $sites_org_tty (optional)
     * @param  string $sites_recruitment_status (optional)
     * @param  string $sites_recruitment_status_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrialsByGetAsyncWithHttpInfo($size = null, $from = null, $include = null, $exclude = null, $_fulltext = null, $sites_org_name_fulltext = null, $_trialids = null, $nci_id = null, $nct_id = null, $protocol_id = null, $ccr_id = null, $ctep_id = null, $dcp_id = null, $current_trial_status = null, $phase_phase = null, $study_protocol_type = null, $brief_title = null, $brief_summary = null, $official_title = null, $primary_purpose_primary_purpose_code = null, $accepts_healthy_volunteers_indicator = null, $acronym = null, $amendment_date = null, $anatomic_sites = null, $arms_arm_description = null, $arms_arm_name = null, $arms_arm_type = null, $arms_interventions_intervention_code = null, $arms_interventions_intervention_description = null, $arms_interventions_intervention_name = null, $arms_interventions_intervention_type = null, $arms_interventions_synonyms = null, $associated_studies_study_id = null, $associated_studies_study_id_type = null, $eligibility_structured_gender = null, $eligibility_structured_max_age_in_years_lte = null, $eligibility_structured_max_age_in_years_gte = null, $eligibility_structured_min_age_in_years_lte = null, $eligibility_structured_min_age_in_years_gte = null, $eligibility_structured_min_age_unit = null, $eligibility_structured_max_age_unit = null, $eligibility_structured_max_age_number_lte = null, $eligibility_structured_max_age_number_gte = null, $eligibility_structured_min_age_number_lte = null, $eligibility_structured_min_age_number_gte = null, $current_trial_status_date_lte = null, $current_trial_status_date_gte = null, $record_verification_date_lte = null, $record_verification_date_gte = null, $sites_org_coordinates_lat = null, $sites_org_coordinates_lon = null, $sites_org_coordinates_dist = null, $sites_contact_email = null, $sites_contact_name = null, $sites_contact_name__auto = null, $sites_contact_name__raw = null, $sites_contact_phone = null, $sites_generic_contact = null, $sites_org_address_line_1 = null, $sites_org_address_line_2 = null, $sites_org_city = null, $sites_org_postal_code = null, $sites_org_state_or_province = null, $sites_org_country = null, $sites_org_country__raw = null, $sites_org_email = null, $sites_org_family = null, $sites_org_fax = null, $sites_org_name = null, $sites_org_name__auto = null, $sites_org_name__raw = null, $sites_org_phone = null, $sites_org_status = null, $sites_org_status_date = null, $sites_org_to_family_relationship = null, $sites_org_tty = null, $sites_recruitment_status = null, $sites_recruitment_status_date = null)
    {
        $returnType = '';
        $request = $this->searchTrialsByGetRequest($size, $from, $include, $exclude, $_fulltext, $sites_org_name_fulltext, $_trialids, $nci_id, $nct_id, $protocol_id, $ccr_id, $ctep_id, $dcp_id, $current_trial_status, $phase_phase, $study_protocol_type, $brief_title, $brief_summary, $official_title, $primary_purpose_primary_purpose_code, $accepts_healthy_volunteers_indicator, $acronym, $amendment_date, $anatomic_sites, $arms_arm_description, $arms_arm_name, $arms_arm_type, $arms_interventions_intervention_code, $arms_interventions_intervention_description, $arms_interventions_intervention_name, $arms_interventions_intervention_type, $arms_interventions_synonyms, $associated_studies_study_id, $associated_studies_study_id_type, $eligibility_structured_gender, $eligibility_structured_max_age_in_years_lte, $eligibility_structured_max_age_in_years_gte, $eligibility_structured_min_age_in_years_lte, $eligibility_structured_min_age_in_years_gte, $eligibility_structured_min_age_unit, $eligibility_structured_max_age_unit, $eligibility_structured_max_age_number_lte, $eligibility_structured_max_age_number_gte, $eligibility_structured_min_age_number_lte, $eligibility_structured_min_age_number_gte, $current_trial_status_date_lte, $current_trial_status_date_gte, $record_verification_date_lte, $record_verification_date_gte, $sites_org_coordinates_lat, $sites_org_coordinates_lon, $sites_org_coordinates_dist, $sites_contact_email, $sites_contact_name, $sites_contact_name__auto, $sites_contact_name__raw, $sites_contact_phone, $sites_generic_contact, $sites_org_address_line_1, $sites_org_address_line_2, $sites_org_city, $sites_org_postal_code, $sites_org_state_or_province, $sites_org_country, $sites_org_country__raw, $sites_org_email, $sites_org_family, $sites_org_fax, $sites_org_name, $sites_org_name__auto, $sites_org_name__raw, $sites_org_phone, $sites_org_status, $sites_org_status_date, $sites_org_to_family_relationship, $sites_org_tty, $sites_recruitment_status, $sites_recruitment_status_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTrialsByGet'
     *
     * @param  string $size Size of results. (optional)
     * @param  string $from Starting from nth position of results lineup. (optional)
     * @param  string $include Include only this attribute in trials and exclude others. (optional)
     * @param  string $exclude Exclude only this attribute in trials and include others. (optional)
     * @param  string $_fulltext filter results by examining a variety of text-based fields. (optional)
     * @param  string $sites_org_name_fulltext filter results by examining words that make up organization name e.g &#x27;Mayo&#x27;. (optional)
     * @param  string $_trialids filter results by examining trial identifiers. (optional)
     * @param  string $nci_id Search by NCI ID. (optional)
     * @param  string $nct_id Search by NCT ID. (optional)
     * @param  string $protocol_id Search by Protocol ID. (optional)
     * @param  string $ccr_id Search by CCR ID. (optional)
     * @param  string $ctep_id Search by CTEP ID (optional)
     * @param  string $dcp_id Search by DCP ID (optional)
     * @param  string $current_trial_status (optional)
     * @param  string $phase_phase (optional)
     * @param  string $study_protocol_type (optional)
     * @param  string $brief_title (optional)
     * @param  string $brief_summary (optional)
     * @param  string $official_title (optional)
     * @param  string $primary_purpose_primary_purpose_code (optional)
     * @param  string $accepts_healthy_volunteers_indicator (optional)
     * @param  string $acronym (optional)
     * @param  string $amendment_date (optional)
     * @param  string $anatomic_sites (optional)
     * @param  string $arms_arm_description (optional)
     * @param  string $arms_arm_name (optional)
     * @param  string $arms_arm_type (optional)
     * @param  string $arms_interventions_intervention_code (optional)
     * @param  string $arms_interventions_intervention_description (optional)
     * @param  string $arms_interventions_intervention_name (optional)
     * @param  string $arms_interventions_intervention_type (optional)
     * @param  string $arms_interventions_synonyms (optional)
     * @param  string $associated_studies_study_id (optional)
     * @param  string $associated_studies_study_id_type (optional)
     * @param  string $eligibility_structured_gender (optional)
     * @param  string $eligibility_structured_max_age_in_years_lte (optional)
     * @param  string $eligibility_structured_max_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_in_years_lte (optional)
     * @param  string $eligibility_structured_min_age_in_years_gte (optional)
     * @param  string $eligibility_structured_min_age_unit (optional)
     * @param  string $eligibility_structured_max_age_unit (optional)
     * @param  string $eligibility_structured_max_age_number_lte (optional)
     * @param  string $eligibility_structured_max_age_number_gte (optional)
     * @param  string $eligibility_structured_min_age_number_lte (optional)
     * @param  string $eligibility_structured_min_age_number_gte (optional)
     * @param  string $current_trial_status_date_lte (optional)
     * @param  string $current_trial_status_date_gte (optional)
     * @param  string $record_verification_date_lte (optional)
     * @param  string $record_verification_date_gte (optional)
     * @param  string $sites_org_coordinates_lat (optional)
     * @param  string $sites_org_coordinates_lon (optional)
     * @param  string $sites_org_coordinates_dist (optional)
     * @param  string $sites_contact_email (optional)
     * @param  string $sites_contact_name (optional)
     * @param  string $sites_contact_name__auto (optional)
     * @param  string $sites_contact_name__raw (optional)
     * @param  string $sites_contact_phone (optional)
     * @param  string $sites_generic_contact (optional)
     * @param  string $sites_org_address_line_1 (optional)
     * @param  string $sites_org_address_line_2 (optional)
     * @param  string $sites_org_city (optional)
     * @param  string $sites_org_postal_code (optional)
     * @param  string $sites_org_state_or_province (optional)
     * @param  string $sites_org_country (optional)
     * @param  string $sites_org_country__raw (optional)
     * @param  string $sites_org_email (optional)
     * @param  string $sites_org_family (optional)
     * @param  string $sites_org_fax (optional)
     * @param  string $sites_org_name (optional)
     * @param  string $sites_org_name__auto (optional)
     * @param  string $sites_org_name__raw (optional)
     * @param  string $sites_org_phone (optional)
     * @param  string $sites_org_status (optional)
     * @param  string $sites_org_status_date (optional)
     * @param  string $sites_org_to_family_relationship (optional)
     * @param  string $sites_org_tty (optional)
     * @param  string $sites_recruitment_status (optional)
     * @param  string $sites_recruitment_status_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTrialsByGetRequest($size = null, $from = null, $include = null, $exclude = null, $_fulltext = null, $sites_org_name_fulltext = null, $_trialids = null, $nci_id = null, $nct_id = null, $protocol_id = null, $ccr_id = null, $ctep_id = null, $dcp_id = null, $current_trial_status = null, $phase_phase = null, $study_protocol_type = null, $brief_title = null, $brief_summary = null, $official_title = null, $primary_purpose_primary_purpose_code = null, $accepts_healthy_volunteers_indicator = null, $acronym = null, $amendment_date = null, $anatomic_sites = null, $arms_arm_description = null, $arms_arm_name = null, $arms_arm_type = null, $arms_interventions_intervention_code = null, $arms_interventions_intervention_description = null, $arms_interventions_intervention_name = null, $arms_interventions_intervention_type = null, $arms_interventions_synonyms = null, $associated_studies_study_id = null, $associated_studies_study_id_type = null, $eligibility_structured_gender = null, $eligibility_structured_max_age_in_years_lte = null, $eligibility_structured_max_age_in_years_gte = null, $eligibility_structured_min_age_in_years_lte = null, $eligibility_structured_min_age_in_years_gte = null, $eligibility_structured_min_age_unit = null, $eligibility_structured_max_age_unit = null, $eligibility_structured_max_age_number_lte = null, $eligibility_structured_max_age_number_gte = null, $eligibility_structured_min_age_number_lte = null, $eligibility_structured_min_age_number_gte = null, $current_trial_status_date_lte = null, $current_trial_status_date_gte = null, $record_verification_date_lte = null, $record_verification_date_gte = null, $sites_org_coordinates_lat = null, $sites_org_coordinates_lon = null, $sites_org_coordinates_dist = null, $sites_contact_email = null, $sites_contact_name = null, $sites_contact_name__auto = null, $sites_contact_name__raw = null, $sites_contact_phone = null, $sites_generic_contact = null, $sites_org_address_line_1 = null, $sites_org_address_line_2 = null, $sites_org_city = null, $sites_org_postal_code = null, $sites_org_state_or_province = null, $sites_org_country = null, $sites_org_country__raw = null, $sites_org_email = null, $sites_org_family = null, $sites_org_fax = null, $sites_org_name = null, $sites_org_name__auto = null, $sites_org_name__raw = null, $sites_org_phone = null, $sites_org_status = null, $sites_org_status_date = null, $sites_org_to_family_relationship = null, $sites_org_tty = null, $sites_recruitment_status = null, $sites_recruitment_status_date = null)
    {

        $resourcePath = '/v1/clinical-trials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($exclude !== null) {
            $queryParams['exclude'] = ObjectSerializer::toQueryValue($exclude);
        }
        // query params
        if ($_fulltext !== null) {
            $queryParams['_fulltext'] = ObjectSerializer::toQueryValue($_fulltext);
        }
        // query params
        if ($sites_org_name_fulltext !== null) {
            $queryParams['sites.org_name_fulltext'] = ObjectSerializer::toQueryValue($sites_org_name_fulltext);
        }
        // query params
        if ($_trialids !== null) {
            $queryParams['_trialids'] = ObjectSerializer::toQueryValue($_trialids);
        }
        // query params
        if ($nci_id !== null) {
            $queryParams['nci_id'] = ObjectSerializer::toQueryValue($nci_id);
        }
        // query params
        if ($nct_id !== null) {
            $queryParams['nct_id'] = ObjectSerializer::toQueryValue($nct_id);
        }
        // query params
        if ($protocol_id !== null) {
            $queryParams['protocol_id'] = ObjectSerializer::toQueryValue($protocol_id);
        }
        // query params
        if ($ccr_id !== null) {
            $queryParams['ccr_id'] = ObjectSerializer::toQueryValue($ccr_id);
        }
        // query params
        if ($ctep_id !== null) {
            $queryParams['ctep_id'] = ObjectSerializer::toQueryValue($ctep_id);
        }
        // query params
        if ($dcp_id !== null) {
            $queryParams['dcp_id'] = ObjectSerializer::toQueryValue($dcp_id);
        }
        // query params
        if ($current_trial_status !== null) {
            $queryParams['current_trial_status'] = ObjectSerializer::toQueryValue($current_trial_status);
        }
        // query params
        if ($phase_phase !== null) {
            $queryParams['phase.phase'] = ObjectSerializer::toQueryValue($phase_phase);
        }
        // query params
        if ($study_protocol_type !== null) {
            $queryParams['study_protocol_type'] = ObjectSerializer::toQueryValue($study_protocol_type);
        }
        // query params
        if ($brief_title !== null) {
            $queryParams['brief_title'] = ObjectSerializer::toQueryValue($brief_title);
        }
        // query params
        if ($brief_summary !== null) {
            $queryParams['brief_summary'] = ObjectSerializer::toQueryValue($brief_summary);
        }
        // query params
        if ($official_title !== null) {
            $queryParams['official_title'] = ObjectSerializer::toQueryValue($official_title);
        }
        // query params
        if ($primary_purpose_primary_purpose_code !== null) {
            $queryParams['primary_purpose.primary_purpose_code'] = ObjectSerializer::toQueryValue($primary_purpose_primary_purpose_code);
        }
        // query params
        if ($accepts_healthy_volunteers_indicator !== null) {
            $queryParams['accepts_healthy_volunteers_indicator'] = ObjectSerializer::toQueryValue($accepts_healthy_volunteers_indicator);
        }
        // query params
        if ($acronym !== null) {
            $queryParams['acronym'] = ObjectSerializer::toQueryValue($acronym);
        }
        // query params
        if ($amendment_date !== null) {
            $queryParams['amendment_date'] = ObjectSerializer::toQueryValue($amendment_date);
        }
        // query params
        if ($anatomic_sites !== null) {
            $queryParams['anatomic_sites'] = ObjectSerializer::toQueryValue($anatomic_sites);
        }
        // query params
        if ($arms_arm_description !== null) {
            $queryParams['arms.arm_description'] = ObjectSerializer::toQueryValue($arms_arm_description);
        }
        // query params
        if ($arms_arm_name !== null) {
            $queryParams['arms.arm_name'] = ObjectSerializer::toQueryValue($arms_arm_name);
        }
        // query params
        if ($arms_arm_type !== null) {
            $queryParams['arms.arm_type'] = ObjectSerializer::toQueryValue($arms_arm_type);
        }
        // query params
        if ($arms_interventions_intervention_code !== null) {
            $queryParams['arms.interventions.intervention_code'] = ObjectSerializer::toQueryValue($arms_interventions_intervention_code);
        }
        // query params
        if ($arms_interventions_intervention_description !== null) {
            $queryParams['arms.interventions.intervention_description'] = ObjectSerializer::toQueryValue($arms_interventions_intervention_description);
        }
        // query params
        if ($arms_interventions_intervention_name !== null) {
            $queryParams['arms.interventions.intervention_name'] = ObjectSerializer::toQueryValue($arms_interventions_intervention_name);
        }
        // query params
        if ($arms_interventions_intervention_type !== null) {
            $queryParams['arms.interventions.intervention_type'] = ObjectSerializer::toQueryValue($arms_interventions_intervention_type);
        }
        // query params
        if ($arms_interventions_synonyms !== null) {
            $queryParams['arms.interventions.synonyms'] = ObjectSerializer::toQueryValue($arms_interventions_synonyms);
        }
        // query params
        if ($associated_studies_study_id !== null) {
            $queryParams['associated_studies.study_id'] = ObjectSerializer::toQueryValue($associated_studies_study_id);
        }
        // query params
        if ($associated_studies_study_id_type !== null) {
            $queryParams['associated_studies.study_id_type'] = ObjectSerializer::toQueryValue($associated_studies_study_id_type);
        }
        // query params
        if ($eligibility_structured_gender !== null) {
            $queryParams['eligibility.structured.gender'] = ObjectSerializer::toQueryValue($eligibility_structured_gender);
        }
        // query params
        if ($eligibility_structured_max_age_in_years_lte !== null) {
            $queryParams['eligibility.structured.max_age_in_years_lte'] = ObjectSerializer::toQueryValue($eligibility_structured_max_age_in_years_lte);
        }
        // query params
        if ($eligibility_structured_max_age_in_years_gte !== null) {
            $queryParams['eligibility.structured.max_age_in_years_gte'] = ObjectSerializer::toQueryValue($eligibility_structured_max_age_in_years_gte);
        }
        // query params
        if ($eligibility_structured_min_age_in_years_lte !== null) {
            $queryParams['eligibility.structured.min_age_in_years_lte'] = ObjectSerializer::toQueryValue($eligibility_structured_min_age_in_years_lte);
        }
        // query params
        if ($eligibility_structured_min_age_in_years_gte !== null) {
            $queryParams['eligibility.structured.min_age_in_years_gte'] = ObjectSerializer::toQueryValue($eligibility_structured_min_age_in_years_gte);
        }
        // query params
        if ($eligibility_structured_min_age_unit !== null) {
            $queryParams['eligibility.structured.min_age_unit'] = ObjectSerializer::toQueryValue($eligibility_structured_min_age_unit);
        }
        // query params
        if ($eligibility_structured_max_age_unit !== null) {
            $queryParams['eligibility.structured.max_age_unit'] = ObjectSerializer::toQueryValue($eligibility_structured_max_age_unit);
        }
        // query params
        if ($eligibility_structured_max_age_number_lte !== null) {
            $queryParams['eligibility.structured.max_age_number_lte'] = ObjectSerializer::toQueryValue($eligibility_structured_max_age_number_lte);
        }
        // query params
        if ($eligibility_structured_max_age_number_gte !== null) {
            $queryParams['eligibility.structured.max_age_number_gte'] = ObjectSerializer::toQueryValue($eligibility_structured_max_age_number_gte);
        }
        // query params
        if ($eligibility_structured_min_age_number_lte !== null) {
            $queryParams['eligibility.structured.min_age_number_lte'] = ObjectSerializer::toQueryValue($eligibility_structured_min_age_number_lte);
        }
        // query params
        if ($eligibility_structured_min_age_number_gte !== null) {
            $queryParams['eligibility.structured.min_age_number_gte'] = ObjectSerializer::toQueryValue($eligibility_structured_min_age_number_gte);
        }
        // query params
        if ($current_trial_status_date_lte !== null) {
            $queryParams['current_trial_status_date_lte'] = ObjectSerializer::toQueryValue($current_trial_status_date_lte);
        }
        // query params
        if ($current_trial_status_date_gte !== null) {
            $queryParams['current_trial_status_date_gte'] = ObjectSerializer::toQueryValue($current_trial_status_date_gte);
        }
        // query params
        if ($record_verification_date_lte !== null) {
            $queryParams['record_verification_date_lte'] = ObjectSerializer::toQueryValue($record_verification_date_lte);
        }
        // query params
        if ($record_verification_date_gte !== null) {
            $queryParams['record_verification_date_gte'] = ObjectSerializer::toQueryValue($record_verification_date_gte);
        }
        // query params
        if ($sites_org_coordinates_lat !== null) {
            $queryParams['sites.org_coordinates_lat'] = ObjectSerializer::toQueryValue($sites_org_coordinates_lat);
        }
        // query params
        if ($sites_org_coordinates_lon !== null) {
            $queryParams['sites.org_coordinates_lon'] = ObjectSerializer::toQueryValue($sites_org_coordinates_lon);
        }
        // query params
        if ($sites_org_coordinates_dist !== null) {
            $queryParams['sites.org_coordinates_dist'] = ObjectSerializer::toQueryValue($sites_org_coordinates_dist);
        }
        // query params
        if ($sites_contact_email !== null) {
            $queryParams['sites.contact_email'] = ObjectSerializer::toQueryValue($sites_contact_email);
        }
        // query params
        if ($sites_contact_name !== null) {
            $queryParams['sites.contact_name'] = ObjectSerializer::toQueryValue($sites_contact_name);
        }
        // query params
        if ($sites_contact_name__auto !== null) {
            $queryParams['sites.contact_name._auto'] = ObjectSerializer::toQueryValue($sites_contact_name__auto);
        }
        // query params
        if ($sites_contact_name__raw !== null) {
            $queryParams['sites.contact_name._raw'] = ObjectSerializer::toQueryValue($sites_contact_name__raw);
        }
        // query params
        if ($sites_contact_phone !== null) {
            $queryParams['sites.contact_phone'] = ObjectSerializer::toQueryValue($sites_contact_phone);
        }
        // query params
        if ($sites_generic_contact !== null) {
            $queryParams['sites.generic_contact'] = ObjectSerializer::toQueryValue($sites_generic_contact);
        }
        // query params
        if ($sites_org_address_line_1 !== null) {
            $queryParams['sites.org_address_line_1'] = ObjectSerializer::toQueryValue($sites_org_address_line_1);
        }
        // query params
        if ($sites_org_address_line_2 !== null) {
            $queryParams['sites.org_address_line_2'] = ObjectSerializer::toQueryValue($sites_org_address_line_2);
        }
        // query params
        if ($sites_org_city !== null) {
            $queryParams['sites.org_city'] = ObjectSerializer::toQueryValue($sites_org_city);
        }
        // query params
        if ($sites_org_postal_code !== null) {
            $queryParams['sites.org_postal_code'] = ObjectSerializer::toQueryValue($sites_org_postal_code);
        }
        // query params
        if ($sites_org_state_or_province !== null) {
            $queryParams['sites.org_state_or_province'] = ObjectSerializer::toQueryValue($sites_org_state_or_province);
        }
        // query params
        if ($sites_org_country !== null) {
            $queryParams['sites.org_country'] = ObjectSerializer::toQueryValue($sites_org_country);
        }
        // query params
        if ($sites_org_country__raw !== null) {
            $queryParams['sites.org_country._raw'] = ObjectSerializer::toQueryValue($sites_org_country__raw);
        }
        // query params
        if ($sites_org_email !== null) {
            $queryParams['sites.org_email'] = ObjectSerializer::toQueryValue($sites_org_email);
        }
        // query params
        if ($sites_org_family !== null) {
            $queryParams['sites.org_family'] = ObjectSerializer::toQueryValue($sites_org_family);
        }
        // query params
        if ($sites_org_fax !== null) {
            $queryParams['sites.org_fax'] = ObjectSerializer::toQueryValue($sites_org_fax);
        }
        // query params
        if ($sites_org_name !== null) {
            $queryParams['sites.org_name'] = ObjectSerializer::toQueryValue($sites_org_name);
        }
        // query params
        if ($sites_org_name__auto !== null) {
            $queryParams['sites.org_name._auto'] = ObjectSerializer::toQueryValue($sites_org_name__auto);
        }
        // query params
        if ($sites_org_name__raw !== null) {
            $queryParams['sites.org_name._raw'] = ObjectSerializer::toQueryValue($sites_org_name__raw);
        }
        // query params
        if ($sites_org_phone !== null) {
            $queryParams['sites.org_phone'] = ObjectSerializer::toQueryValue($sites_org_phone);
        }
        // query params
        if ($sites_org_status !== null) {
            $queryParams['sites.org_status'] = ObjectSerializer::toQueryValue($sites_org_status);
        }
        // query params
        if ($sites_org_status_date !== null) {
            $queryParams['sites.org_status_date'] = ObjectSerializer::toQueryValue($sites_org_status_date);
        }
        // query params
        if ($sites_org_to_family_relationship !== null) {
            $queryParams['sites.org_to_family_relationship'] = ObjectSerializer::toQueryValue($sites_org_to_family_relationship);
        }
        // query params
        if ($sites_org_tty !== null) {
            $queryParams['sites.org_tty'] = ObjectSerializer::toQueryValue($sites_org_tty);
        }
        // query params
        if ($sites_recruitment_status !== null) {
            $queryParams['sites.recruitment_status'] = ObjectSerializer::toQueryValue($sites_recruitment_status);
        }
        // query params
        if ($sites_recruitment_status_date !== null) {
            $queryParams['sites.recruitment_status_date'] = ObjectSerializer::toQueryValue($sites_recruitment_status_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTrialsByPost
     *
     * Search Trials by POST
     *
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function searchTrialsByPost()
    {
        $this->searchTrialsByPostWithHttpInfo();
    }

    /**
     * Operation searchTrialsByPostWithHttpInfo
     *
     * Search Trials by POST
     *
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTrialsByPostWithHttpInfo()
    {
        $returnType = '';
        $request = $this->searchTrialsByPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation searchTrialsByPostAsync
     *
     * Search Trials by POST
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrialsByPostAsync()
    {
        return $this->searchTrialsByPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTrialsByPostAsyncWithHttpInfo
     *
     * Search Trials by POST
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrialsByPostAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->searchTrialsByPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTrialsByPost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTrialsByPostRequest()
    {

        $resourcePath = '/v1/clinical-trials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
