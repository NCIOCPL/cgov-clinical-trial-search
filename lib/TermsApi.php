<?php
/**
 * TermsApi
 * PHP version 5
 *
 * @category Class
 * @package  NCIOCPL\ClinicalTrialSearch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NCI Clinical Trials Search API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NCIOCPL\ClinicalTrialSearch;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\Configuration;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\HeaderSelector;
use NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ObjectSerializer;

/**
 * TermsApi Class Doc Comment
 *
 * @category Class
 * @package  NCIOCPL\ClinicalTrialSearch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TermsApi implements TermsApiInterface
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTermByTermKey
     *
     * Get Term by 'term_key' value
     *
     * @param  string $term_key &#x27;term_key&#x27; value of term. (required)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NCIOCPL\ClinicalTrialSearch\Model\Term
     */
    public function getTermByTermKey($term_key)
    {
      list($response) = $this->getTermByTermKeyWithHttpInfo($term_key);
      return $response;
    }

    /**
     * Operation getTermByTermKeyWithHttpInfo
     *
     * Get Term by 'term_key' value
     *
     * @param  string $term_key &#x27;term_key&#x27; value of term. (required)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermByTermKeyWithHttpInfo($term_key)
    {
      $returnType = '\NCIOCPL\ClinicalTrialSearch\Model\Term';
      $request = $this->getTermByTermKeyRequest($term_key);

      try {
        $options = $this->createHttpClientOption();
        try {
          $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
          throw new ApiException(
              "[{$e->getCode()}] {$e->getMessage()}",
              $e->getCode(),
              $e->getResponse() ? $e->getResponse()->getHeaders() : null,
              $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
          );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
          throw new ApiException(
            sprintf(
              '[%d] Error connecting to the API (%s)',
              $statusCode,
              $request->getUri()
            ),
            $statusCode,
            $response->getHeaders(),
            $response->getBody()
          );
        }

        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
          $content = $responseBody; //stream goes to serializer
        } else {
          $content = $responseBody->getContents();
          if (!in_array($returnType, ['string', 'integer', 'bool'])) {
            $content = json_decode($content);
          }
        }

        return [
          ObjectSerializer::deserialize($content, $returnType, []),
          $response->getStatusCode(),
          $response->getHeaders()
        ];

      } catch (ApiException $e) {
        switch ($e->getCode()) {
          case 200:
            $data = ObjectSerializer::deserialize(
              $e->getResponseBody(),
            '\NCIOCPL\ClinicalTrialSearch\Model\Term',
              $e->getResponseHeaders()
            );
            $e->setResponseObject($data);
            break;
        }
        throw $e;
      }
    }

    /**
     * Operation getTermByTermKeyAsync
     *
     * Get Term by 'term_key' value
     *
     * @param  string $term_key &#x27;term_key&#x27; value of term. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermByTermKeyAsync($term_key)
    {
        return $this->getTermByTermKeyAsyncWithHttpInfo($term_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTermByTermKeyAsyncWithHttpInfo
     *
     * Get Term by 'term_key' value
     *
     * @param  string $term_key &#x27;term_key&#x27; value of term. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermByTermKeyAsyncWithHttpInfo($term_key)
    {
        $returnType = '';
        $request = $this->getTermByTermKeyRequest($term_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTermByTermKey'
     *
     * @param  string $term_key &#x27;term_key&#x27; value of term. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermByTermKeyRequest($term_key)
    {
        // verify the required parameter 'term_key' is set
        if ($term_key === null || (is_array($term_key) && count($term_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_key when calling getTermByTermKey'
            );
        }

        $resourcePath = '/v1/term/{term_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($term_key !== null) {
            $resourcePath = str_replace(
                '{' . 'term_key' . '}',
                ObjectSerializer::toPathValue($term_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsByGet
     *
     * Search Terms by GET
     *
     * @param  string $term term (optional)
     * @param  string $term_type term_type (optional)
     * @param  string $sort Sort by &#x27;term&#x27; if sort is default alphabetically asc or &#x27;count&#x27; by occurance default desc otherwise use order. (optional)
     * @param  string $order Asc or Desc. (optional)
     * @param  string $size size (optional)
     * @param  string $from from (optional)
     * @param  string $codes Used with _diseases (optional)
     * @param  string $current_trial_statuses current_trial_statuses (optional)
     * @param  string $org_country org_country (optional)
     * @param  string $org_state_or_province org_state_or_province (optional)
     * @param  string $org_city org_city (optional)
     * @param  string $org_postal_code org_postal_code (optional)
     * @param  string $org_to_family_relationship Org Family Relationship: To be used with _orgs_by_location to set family relationship (optional)
     * @param  string $org_coordinates_lon Longitude: To be used with _orgs_by_location to set longitude (optional)
     * @param  string $org_coordinates_lat Latitude: To be used with _orgs_by_location to set latitude (optional)
     * @param  string $org_coordinates_dist Distance (in miles): To be used with _orgs_by_location to find distance from coordinates OR postal code (optional)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function searchTermsByGet($term = null, $term_type = null, $sort = null, $order = null, $size = null, $from = null, $codes = null, $current_trial_statuses = null, $org_country = null, $org_state_or_province = null, $org_city = null, $org_postal_code = null, $org_to_family_relationship = null, $org_coordinates_lon = null, $org_coordinates_lat = null, $org_coordinates_dist = null)
    {
        $this->searchTermsByGetWithHttpInfo($term, $term_type, $sort, $order, $size, $from, $codes, $current_trial_statuses, $org_country, $org_state_or_province, $org_city, $org_postal_code, $org_to_family_relationship, $org_coordinates_lon, $org_coordinates_lat, $org_coordinates_dist);
    }

    /**
     * Operation searchTermsByGetWithHttpInfo
     *
     * Search Terms by GET
     *
     * @param  string $term (optional)
     * @param  string $term_type (optional)
     * @param  string $sort Sort by &#x27;term&#x27; if sort is default alphabetically asc or &#x27;count&#x27; by occurance default desc otherwise use order. (optional)
     * @param  string $order Asc or Desc. (optional)
     * @param  string $size (optional)
     * @param  string $from (optional)
     * @param  string $codes Used with _diseases (optional)
     * @param  string $current_trial_statuses (optional)
     * @param  string $org_country (optional)
     * @param  string $org_state_or_province (optional)
     * @param  string $org_city (optional)
     * @param  string $org_postal_code (optional)
     * @param  string $org_to_family_relationship Org Family Relationship: To be used with _orgs_by_location to set family relationship (optional)
     * @param  string $org_coordinates_lon Longitude: To be used with _orgs_by_location to set longitude (optional)
     * @param  string $org_coordinates_lat Latitude: To be used with _orgs_by_location to set latitude (optional)
     * @param  string $org_coordinates_dist Distance (in miles): To be used with _orgs_by_location to find distance from coordinates OR postal code (optional)
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsByGetWithHttpInfo($term = null, $term_type = null, $sort = null, $order = null, $size = null, $from = null, $codes = null, $current_trial_statuses = null, $org_country = null, $org_state_or_province = null, $org_city = null, $org_postal_code = null, $org_to_family_relationship = null, $org_coordinates_lon = null, $org_coordinates_lat = null, $org_coordinates_dist = null)
    {
        $returnType = '';
        $request = $this->searchTermsByGetRequest($term, $term_type, $sort, $order, $size, $from, $codes, $current_trial_statuses, $org_country, $org_state_or_province, $org_city, $org_postal_code, $org_to_family_relationship, $org_coordinates_lon, $org_coordinates_lat, $org_coordinates_dist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsByGetAsync
     *
     * Search Terms by GET
     *
     * @param  string $term (optional)
     * @param  string $term_type (optional)
     * @param  string $sort Sort by &#x27;term&#x27; if sort is default alphabetically asc or &#x27;count&#x27; by occurance default desc otherwise use order. (optional)
     * @param  string $order Asc or Desc. (optional)
     * @param  string $size (optional)
     * @param  string $from (optional)
     * @param  string $codes Used with _diseases (optional)
     * @param  string $current_trial_statuses (optional)
     * @param  string $org_country (optional)
     * @param  string $org_state_or_province (optional)
     * @param  string $org_city (optional)
     * @param  string $org_postal_code (optional)
     * @param  string $org_to_family_relationship Org Family Relationship: To be used with _orgs_by_location to set family relationship (optional)
     * @param  string $org_coordinates_lon Longitude: To be used with _orgs_by_location to set longitude (optional)
     * @param  string $org_coordinates_lat Latitude: To be used with _orgs_by_location to set latitude (optional)
     * @param  string $org_coordinates_dist Distance (in miles): To be used with _orgs_by_location to find distance from coordinates OR postal code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByGetAsync($term = null, $term_type = null, $sort = null, $order = null, $size = null, $from = null, $codes = null, $current_trial_statuses = null, $org_country = null, $org_state_or_province = null, $org_city = null, $org_postal_code = null, $org_to_family_relationship = null, $org_coordinates_lon = null, $org_coordinates_lat = null, $org_coordinates_dist = null)
    {
        return $this->searchTermsByGetAsyncWithHttpInfo($term, $term_type, $sort, $order, $size, $from, $codes, $current_trial_statuses, $org_country, $org_state_or_province, $org_city, $org_postal_code, $org_to_family_relationship, $org_coordinates_lon, $org_coordinates_lat, $org_coordinates_dist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsByGetAsyncWithHttpInfo
     *
     * Search Terms by GET
     *
     * @param  string $term (optional)
     * @param  string $term_type (optional)
     * @param  string $sort Sort by &#x27;term&#x27; if sort is default alphabetically asc or &#x27;count&#x27; by occurance default desc otherwise use order. (optional)
     * @param  string $order Asc or Desc. (optional)
     * @param  string $size (optional)
     * @param  string $from (optional)
     * @param  string $codes Used with _diseases (optional)
     * @param  string $current_trial_statuses (optional)
     * @param  string $org_country (optional)
     * @param  string $org_state_or_province (optional)
     * @param  string $org_city (optional)
     * @param  string $org_postal_code (optional)
     * @param  string $org_to_family_relationship Org Family Relationship: To be used with _orgs_by_location to set family relationship (optional)
     * @param  string $org_coordinates_lon Longitude: To be used with _orgs_by_location to set longitude (optional)
     * @param  string $org_coordinates_lat Latitude: To be used with _orgs_by_location to set latitude (optional)
     * @param  string $org_coordinates_dist Distance (in miles): To be used with _orgs_by_location to find distance from coordinates OR postal code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByGetAsyncWithHttpInfo($term = null, $term_type = null, $sort = null, $order = null, $size = null, $from = null, $codes = null, $current_trial_statuses = null, $org_country = null, $org_state_or_province = null, $org_city = null, $org_postal_code = null, $org_to_family_relationship = null, $org_coordinates_lon = null, $org_coordinates_lat = null, $org_coordinates_dist = null)
    {
        $returnType = '';
        $request = $this->searchTermsByGetRequest($term, $term_type, $sort, $order, $size, $from, $codes, $current_trial_statuses, $org_country, $org_state_or_province, $org_city, $org_postal_code, $org_to_family_relationship, $org_coordinates_lon, $org_coordinates_lat, $org_coordinates_dist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsByGet'
     *
     * @param  string $term (optional)
     * @param  string $term_type (optional)
     * @param  string $sort Sort by &#x27;term&#x27; if sort is default alphabetically asc or &#x27;count&#x27; by occurance default desc otherwise use order. (optional)
     * @param  string $order Asc or Desc. (optional)
     * @param  string $size (optional)
     * @param  string $from (optional)
     * @param  string $codes Used with _diseases (optional)
     * @param  string $current_trial_statuses (optional)
     * @param  string $org_country (optional)
     * @param  string $org_state_or_province (optional)
     * @param  string $org_city (optional)
     * @param  string $org_postal_code (optional)
     * @param  string $org_to_family_relationship Org Family Relationship: To be used with _orgs_by_location to set family relationship (optional)
     * @param  string $org_coordinates_lon Longitude: To be used with _orgs_by_location to set longitude (optional)
     * @param  string $org_coordinates_lat Latitude: To be used with _orgs_by_location to set latitude (optional)
     * @param  string $org_coordinates_dist Distance (in miles): To be used with _orgs_by_location to find distance from coordinates OR postal code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsByGetRequest($term = null, $term_type = null, $sort = null, $order = null, $size = null, $from = null, $codes = null, $current_trial_statuses = null, $org_country = null, $org_state_or_province = null, $org_city = null, $org_postal_code = null, $org_to_family_relationship = null, $org_coordinates_lon = null, $org_coordinates_lat = null, $org_coordinates_dist = null)
    {

        $resourcePath = '/v1/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($term_type !== null) {
            $queryParams['term_type'] = ObjectSerializer::toQueryValue($term_type);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($codes !== null) {
            $queryParams['codes'] = ObjectSerializer::toQueryValue($codes);
        }
        // query params
        if ($current_trial_statuses !== null) {
            $queryParams['current_trial_statuses'] = ObjectSerializer::toQueryValue($current_trial_statuses);
        }
        // query params
        if ($org_country !== null) {
            $queryParams['org_country'] = ObjectSerializer::toQueryValue($org_country);
        }
        // query params
        if ($org_state_or_province !== null) {
            $queryParams['org_state_or_province'] = ObjectSerializer::toQueryValue($org_state_or_province);
        }
        // query params
        if ($org_city !== null) {
            $queryParams['org_city'] = ObjectSerializer::toQueryValue($org_city);
        }
        // query params
        if ($org_postal_code !== null) {
            $queryParams['org_postal_code'] = ObjectSerializer::toQueryValue($org_postal_code);
        }
        // query params
        if ($org_to_family_relationship !== null) {
            $queryParams['org_to_family_relationship'] = ObjectSerializer::toQueryValue($org_to_family_relationship);
        }
        // query params
        if ($org_coordinates_lon !== null) {
            $queryParams['org_coordinates_lon'] = ObjectSerializer::toQueryValue($org_coordinates_lon);
        }
        // query params
        if ($org_coordinates_lat !== null) {
            $queryParams['org_coordinates_lat'] = ObjectSerializer::toQueryValue($org_coordinates_lat);
        }
        // query params
        if ($org_coordinates_dist !== null) {
            $queryParams['org_coordinates_dist'] = ObjectSerializer::toQueryValue($org_coordinates_dist);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsByPost
     *
     * Search Terms by POST
     *
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function searchTermsByPost()
    {
        $this->searchTermsByPostWithHttpInfo();
    }

    /**
     * Operation searchTermsByPostWithHttpInfo
     *
     * Search Terms by POST
     *
     *
     * @throws \NCIOCPL\ClinicalTrialSearch\SwaggerGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsByPostWithHttpInfo()
    {
        $returnType = '';
        $request = $this->searchTermsByPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsByPostAsync
     *
     * Search Terms by POST
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByPostAsync()
    {
        return $this->searchTermsByPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsByPostAsyncWithHttpInfo
     *
     * Search Terms by POST
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByPostAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->searchTermsByPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsByPost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsByPostRequest()
    {

        $resourcePath = '/v1/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
